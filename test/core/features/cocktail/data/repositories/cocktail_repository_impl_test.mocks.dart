// Mocks generated by Mockito 5.3.2 from annotations
// in drink_it/test/core/features/cocktail/data/repositories/cocktail_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:drink_it/core/features/cocktail/data/datasources/cocktail_datasource.dart'
    as _i2;
import 'package:drink_it/core/features/cocktail/data/models/cocktail_item_model.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [CocktailDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockCocktailDatasource extends _i1.Mock
    implements _i2.CocktailDatasource {
  MockCocktailDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.CocktailItemModel>> getCocktails({
    String? ingredient,
    String? category,
    String? alcoholic,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCocktails,
          [],
          {
            #ingredient: ingredient,
            #category: category,
            #alcoholic: alcoholic,
          },
        ),
        returnValue: _i3.Future<List<_i4.CocktailItemModel>>.value(
            <_i4.CocktailItemModel>[]),
      ) as _i3.Future<List<_i4.CocktailItemModel>>);
}
