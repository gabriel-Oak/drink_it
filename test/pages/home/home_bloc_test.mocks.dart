// Mocks generated by Mockito 5.3.2 from annotations
// in drink_it/test/pages/home/home_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:drink_it/core/features/cocktail/cocktail_errors.dart' as _i5;
import 'package:drink_it/core/features/cocktail/models/cocktail_item_model.dart'
    as _i6;
import 'package:drink_it/core/features/cocktail/models/cocktail.dart' as _i10;
import 'package:drink_it/core/features/cocktail/usecases/get_details.dart'
    as _i9;
import 'package:drink_it/core/features/cocktail/usecases/lookup_random.dart'
    as _i11;
import 'package:drink_it/core/features/cocktail/usecases/seach_by_alcoholic.dart'
    as _i7;
import 'package:drink_it/core/features/cocktail/usecases/seach_by_ingredient.dart'
    as _i3;
import 'package:drink_it/core/features/cocktail/usecases/search_by_category.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SearchByIngredients].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchByIngredients extends _i1.Mock
    implements _i3.SearchByIngredients {
  MockSearchByIngredients() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.FailureGetCocktails, List<_i6.CocktailItem>>> call(
          String? ingredientName) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [ingredientName],
        ),
        returnValue: _i4.Future<
                _i2.Either<_i5.FailureGetCocktails,
                    List<_i6.CocktailItem>>>.value(
            _FakeEither_0<_i5.FailureGetCocktails, List<_i6.CocktailItem>>(
          this,
          Invocation.method(
            #call,
            [ingredientName],
          ),
        )),
      ) as _i4
          .Future<_i2.Either<_i5.FailureGetCocktails, List<_i6.CocktailItem>>>);
}

/// A class which mocks [SearchByAlcoholic].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchByAlcoholic extends _i1.Mock implements _i7.SearchByAlcoholic {
  MockSearchByAlcoholic() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.FailureGetCocktails, List<_i6.CocktailItem>>> call(
          String? alcoholic) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [alcoholic],
        ),
        returnValue: _i4.Future<
                _i2.Either<_i5.FailureGetCocktails,
                    List<_i6.CocktailItem>>>.value(
            _FakeEither_0<_i5.FailureGetCocktails, List<_i6.CocktailItem>>(
          this,
          Invocation.method(
            #call,
            [alcoholic],
          ),
        )),
      ) as _i4
          .Future<_i2.Either<_i5.FailureGetCocktails, List<_i6.CocktailItem>>>);
}

/// A class which mocks [SearchByCategory].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchByCategory extends _i1.Mock implements _i8.SearchByCategory {
  MockSearchByCategory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.FailureGetCocktails, List<_i6.CocktailItem>>> call(
          String? categoryName) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [categoryName],
        ),
        returnValue: _i4.Future<
                _i2.Either<_i5.FailureGetCocktails,
                    List<_i6.CocktailItem>>>.value(
            _FakeEither_0<_i5.FailureGetCocktails, List<_i6.CocktailItem>>(
          this,
          Invocation.method(
            #call,
            [categoryName],
          ),
        )),
      ) as _i4
          .Future<_i2.Either<_i5.FailureGetCocktails, List<_i6.CocktailItem>>>);
}

/// A class which mocks [GetDetails].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetDetails extends _i1.Mock implements _i9.GetDetails {
  MockGetDetails() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.FailureGetCocktails, _i10.Cocktail>> call(
          String? cocktailId) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [cocktailId],
        ),
        returnValue: _i4.Future<
                _i2.Either<_i5.FailureGetCocktails, _i10.Cocktail>>.value(
            _FakeEither_0<_i5.FailureGetCocktails, _i10.Cocktail>(
          this,
          Invocation.method(
            #call,
            [cocktailId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.FailureGetCocktails, _i10.Cocktail>>);
}

/// A class which mocks [LookupRandom].
///
/// See the documentation for Mockito's code generation for more information.
class MockLookupRandom extends _i1.Mock implements _i11.LookupRandom {
  MockLookupRandom() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.FailureGetCocktails, _i10.Cocktail>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i4.Future<
                _i2.Either<_i5.FailureGetCocktails, _i10.Cocktail>>.value(
            _FakeEither_0<_i5.FailureGetCocktails, _i10.Cocktail>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.FailureGetCocktails, _i10.Cocktail>>);
}
